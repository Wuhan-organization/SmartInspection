package com.whut.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.smartinspection.model.PatrolContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATROL_CONTENT".
*/
public class PatrolContentDao extends AbstractDao<PatrolContent, Long> {

    public static final String TABLENAME = "PATROL_CONTENT";

    /**
     * Properties of entity PatrolContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Idd = new Property(1, String.class, "idd", false, "IDD");
        public final static Property No = new Property(2, int.class, "no", false, "NO");
        public final static Property Part = new Property(3, String.class, "part", false, "PART");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property IsImportant = new Property(5, short.class, "isImportant", false, "IS_IMPORTANT");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property PatrolContentTypeNo = new Property(7, String.class, "patrolContentTypeNo", false, "PATROL_CONTENT_TYPE_NO");
        public final static Property PatrolContentName = new Property(8, String.class, "patrolContentName", false, "PATROL_CONTENT_NAME");
        public final static Property DeviceTypeId = new Property(9, int.class, "deviceTypeId", false, "DEVICE_TYPE_ID");
        public final static Property PatrolNameId = new Property(10, String.class, "patrolNameId", false, "PATROL_NAME_ID");
        public final static Property Unit = new Property(11, String.class, "unit", false, "UNIT");
    }


    public PatrolContentDao(DaoConfig config) {
        super(config);
    }
    
    public PatrolContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATROL_CONTENT\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDD\" TEXT," + // 1: idd
                "\"NO\" INTEGER NOT NULL ," + // 2: no
                "\"PART\" TEXT," + // 3: part
                "\"CONTENT\" TEXT," + // 4: content
                "\"IS_IMPORTANT\" INTEGER NOT NULL ," + // 5: isImportant
                "\"DATE\" TEXT," + // 6: date
                "\"PATROL_CONTENT_TYPE_NO\" TEXT," + // 7: patrolContentTypeNo
                "\"PATROL_CONTENT_NAME\" TEXT," + // 8: patrolContentName
                "\"DEVICE_TYPE_ID\" INTEGER NOT NULL ," + // 9: deviceTypeId
                "\"PATROL_NAME_ID\" TEXT," + // 10: patrolNameId
                "\"UNIT\" TEXT);"); // 11: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATROL_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PatrolContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(2, idd);
        }
        stmt.bindLong(3, entity.getNo());
 
        String part = entity.getPart();
        if (part != null) {
            stmt.bindString(4, part);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getIsImportant());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
 
        String patrolContentTypeNo = entity.getPatrolContentTypeNo();
        if (patrolContentTypeNo != null) {
            stmt.bindString(8, patrolContentTypeNo);
        }
 
        String patrolContentName = entity.getPatrolContentName();
        if (patrolContentName != null) {
            stmt.bindString(9, patrolContentName);
        }
        stmt.bindLong(10, entity.getDeviceTypeId());
 
        String patrolNameId = entity.getPatrolNameId();
        if (patrolNameId != null) {
            stmt.bindString(11, patrolNameId);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(12, unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PatrolContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(2, idd);
        }
        stmt.bindLong(3, entity.getNo());
 
        String part = entity.getPart();
        if (part != null) {
            stmt.bindString(4, part);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getIsImportant());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
 
        String patrolContentTypeNo = entity.getPatrolContentTypeNo();
        if (patrolContentTypeNo != null) {
            stmt.bindString(8, patrolContentTypeNo);
        }
 
        String patrolContentName = entity.getPatrolContentName();
        if (patrolContentName != null) {
            stmt.bindString(9, patrolContentName);
        }
        stmt.bindLong(10, entity.getDeviceTypeId());
 
        String patrolNameId = entity.getPatrolNameId();
        if (patrolNameId != null) {
            stmt.bindString(11, patrolNameId);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(12, unit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PatrolContent readEntity(Cursor cursor, int offset) {
        PatrolContent entity = new PatrolContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idd
            cursor.getInt(offset + 2), // no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // part
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getShort(offset + 5), // isImportant
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // patrolContentTypeNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // patrolContentName
            cursor.getInt(offset + 9), // deviceTypeId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // patrolNameId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PatrolContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNo(cursor.getInt(offset + 2));
        entity.setPart(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsImportant(cursor.getShort(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPatrolContentTypeNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPatrolContentName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceTypeId(cursor.getInt(offset + 9));
        entity.setPatrolNameId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUnit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PatrolContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PatrolContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PatrolContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
