package com.whut.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.whut.smartinspection.model.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Idd = new Property(1, String.class, "idd", false, "IDD");
        public final static Property ValueChar = new Property(2, String.class, "valueChar", false, "VALUE_CHAR");
        public final static Property ValueFloat = new Property(3, float.class, "valueFloat", false, "VALUE_FLOAT");
        public final static Property ValueString = new Property(4, String.class, "valueString", false, "VALUE_STRING");
        public final static Property PatrolRecordDate = new Property(5, long.class, "patrolRecordDate", false, "PATROL_RECORD_DATE");
        public final static Property DeviceId = new Property(6, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property PatrolContentId = new Property(7, String.class, "patrolContentId", false, "PATROL_CONTENT_ID");
        public final static Property Fid = new Property(8, Long.class, "fid", false, "FID");
        public final static Property WholeID = new Property(9, Long.class, "wholeID", false, "WHOLE_ID");
    }

    private Query<Record> perPatrolCard_RecordsQuery;
    private Query<Record> wholePatrolCard_RecordsQuery;

    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IDD\" TEXT," + // 1: idd
                "\"VALUE_CHAR\" TEXT," + // 2: valueChar
                "\"VALUE_FLOAT\" REAL NOT NULL ," + // 3: valueFloat
                "\"VALUE_STRING\" TEXT," + // 4: valueString
                "\"PATROL_RECORD_DATE\" INTEGER NOT NULL ," + // 5: patrolRecordDate
                "\"DEVICE_ID\" TEXT," + // 6: deviceId
                "\"PATROL_CONTENT_ID\" TEXT," + // 7: patrolContentId
                "\"FID\" INTEGER," + // 8: fid
                "\"WHOLE_ID\" INTEGER);"); // 9: wholeID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(2, idd);
        }
 
        String valueChar = entity.getValueChar();
        if (valueChar != null) {
            stmt.bindString(3, valueChar);
        }
        stmt.bindDouble(4, entity.getValueFloat());
 
        String valueString = entity.getValueString();
        if (valueString != null) {
            stmt.bindString(5, valueString);
        }
        stmt.bindLong(6, entity.getPatrolRecordDate());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(7, deviceId);
        }
 
        String patrolContentId = entity.getPatrolContentId();
        if (patrolContentId != null) {
            stmt.bindString(8, patrolContentId);
        }
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(9, fid);
        }
 
        Long wholeID = entity.getWholeID();
        if (wholeID != null) {
            stmt.bindLong(10, wholeID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(2, idd);
        }
 
        String valueChar = entity.getValueChar();
        if (valueChar != null) {
            stmt.bindString(3, valueChar);
        }
        stmt.bindDouble(4, entity.getValueFloat());
 
        String valueString = entity.getValueString();
        if (valueString != null) {
            stmt.bindString(5, valueString);
        }
        stmt.bindLong(6, entity.getPatrolRecordDate());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(7, deviceId);
        }
 
        String patrolContentId = entity.getPatrolContentId();
        if (patrolContentId != null) {
            stmt.bindString(8, patrolContentId);
        }
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(9, fid);
        }
 
        Long wholeID = entity.getWholeID();
        if (wholeID != null) {
            stmt.bindLong(10, wholeID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idd
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // valueChar
            cursor.getFloat(offset + 3), // valueFloat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // valueString
            cursor.getLong(offset + 5), // patrolRecordDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // patrolContentId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // fid
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // wholeID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValueChar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValueFloat(cursor.getFloat(offset + 3));
        entity.setValueString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPatrolRecordDate(cursor.getLong(offset + 5));
        entity.setDeviceId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPatrolContentId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFid(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setWholeID(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "records" to-many relationship of PerPatrolCard. */
    public List<Record> _queryPerPatrolCard_Records(Long fid) {
        synchronized (this) {
            if (perPatrolCard_RecordsQuery == null) {
                QueryBuilder<Record> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Fid.eq(null));
                perPatrolCard_RecordsQuery = queryBuilder.build();
            }
        }
        Query<Record> query = perPatrolCard_RecordsQuery.forCurrentThread();
        query.setParameter(0, fid);
        return query.list();
    }

    /** Internal query to resolve the "records" to-many relationship of WholePatrolCard. */
    public List<Record> _queryWholePatrolCard_Records(Long fid) {
        synchronized (this) {
            if (wholePatrolCard_RecordsQuery == null) {
                QueryBuilder<Record> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Fid.eq(null));
                wholePatrolCard_RecordsQuery = queryBuilder.build();
            }
        }
        Query<Record> query = wholePatrolCard_RecordsQuery.forCurrentThread();
        query.setParameter(0, fid);
        return query.list();
    }

}
