package com.whut.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.smartinspection.model.PerPatrolCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PER_PATROL_CARD".
*/
public class PerPatrolCardDao extends AbstractDao<PerPatrolCard, Long> {

    public static final String TABLENAME = "PER_PATROL_CARD";

    /**
     * Properties of entity PerPatrolCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Flag = new Property(2, boolean.class, "flag", false, "FLAG");
        public final static Property Fid = new Property(3, Long.class, "fid", false, "FID");
        public final static Property PatrolHeadPageId = new Property(4, String.class, "patrolHeadPageId", false, "PATROL_HEAD_PAGE_ID");
    }

    private DaoSession daoSession;


    public PerPatrolCardDao(DaoConfig config) {
        super(config);
    }
    
    public PerPatrolCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PER_PATROL_CARD\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"FLAG\" INTEGER NOT NULL ," + // 2: flag
                "\"FID\" INTEGER," + // 3: fid
                "\"PATROL_HEAD_PAGE_ID\" TEXT);"); // 4: patrolHeadPageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PER_PATROL_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PerPatrolCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
        stmt.bindLong(3, entity.getFlag() ? 1L: 0L);
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(4, fid);
        }
 
        String patrolHeadPageId = entity.getPatrolHeadPageId();
        if (patrolHeadPageId != null) {
            stmt.bindString(5, patrolHeadPageId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PerPatrolCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
        stmt.bindLong(3, entity.getFlag() ? 1L: 0L);
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(4, fid);
        }
 
        String patrolHeadPageId = entity.getPatrolHeadPageId();
        if (patrolHeadPageId != null) {
            stmt.bindString(5, patrolHeadPageId);
        }
    }

    @Override
    protected final void attachEntity(PerPatrolCard entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PerPatrolCard readEntity(Cursor cursor, int offset) {
        PerPatrolCard entity = new PerPatrolCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.getShort(offset + 2) != 0, // flag
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // fid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // patrolHeadPageId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PerPatrolCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlag(cursor.getShort(offset + 2) != 0);
        entity.setFid(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPatrolHeadPageId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PerPatrolCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PerPatrolCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PerPatrolCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
