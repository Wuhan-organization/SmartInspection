package com.whut.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.smartinspection.model.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property SubId = new Property(1, String.class, "subId", false, "SUB_ID");
        public final static Property SubName = new Property(2, String.class, "subName", false, "SUB_NAME");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property DeviceName = new Property(4, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceTypeId = new Property(5, String.class, "deviceTypeId", false, "DEVICE_TYPE_ID");
        public final static Property GetDeviceName = new Property(6, String.class, "getDeviceName", false, "GET_DEVICE_NAME");
        public final static Property IntervalUnitId = new Property(7, String.class, "intervalUnitId", false, "INTERVAL_UNIT_ID");
        public final static Property IntervalUnitName = new Property(8, String.class, "intervalUnitName", false, "INTERVAL_UNIT_NAME");
        public final static Property PatrolContentId = new Property(9, String.class, "patrolContentId", false, "PATROL_CONTENT_ID");
        public final static Property PatrolContentName = new Property(10, String.class, "patrolContentName", false, "PATROL_CONTENT_NAME");
        public final static Property Problem = new Property(11, String.class, "problem", false, "PROBLEM");
        public final static Property Bug = new Property(12, String.class, "bug", false, "BUG");
        public final static Property Danger = new Property(13, String.class, "danger", false, "DANGER");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUB_ID\" TEXT," + // 1: subId
                "\"SUB_NAME\" TEXT," + // 2: subName
                "\"DEVICE_ID\" TEXT," + // 3: deviceId
                "\"DEVICE_NAME\" TEXT," + // 4: deviceName
                "\"DEVICE_TYPE_ID\" TEXT," + // 5: deviceTypeId
                "\"GET_DEVICE_NAME\" TEXT," + // 6: getDeviceName
                "\"INTERVAL_UNIT_ID\" TEXT," + // 7: intervalUnitId
                "\"INTERVAL_UNIT_NAME\" TEXT," + // 8: intervalUnitName
                "\"PATROL_CONTENT_ID\" TEXT," + // 9: patrolContentId
                "\"PATROL_CONTENT_NAME\" TEXT," + // 10: patrolContentName
                "\"PROBLEM\" TEXT," + // 11: problem
                "\"BUG\" TEXT," + // 12: bug
                "\"DANGER\" TEXT);"); // 13: danger
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subId = entity.getSubId();
        if (subId != null) {
            stmt.bindString(2, subId);
        }
 
        String subName = entity.getSubName();
        if (subName != null) {
            stmt.bindString(3, subName);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        String deviceTypeId = entity.getDeviceTypeId();
        if (deviceTypeId != null) {
            stmt.bindString(6, deviceTypeId);
        }
 
        String getDeviceName = entity.getGetDeviceName();
        if (getDeviceName != null) {
            stmt.bindString(7, getDeviceName);
        }
 
        String intervalUnitId = entity.getIntervalUnitId();
        if (intervalUnitId != null) {
            stmt.bindString(8, intervalUnitId);
        }
 
        String intervalUnitName = entity.getIntervalUnitName();
        if (intervalUnitName != null) {
            stmt.bindString(9, intervalUnitName);
        }
 
        String patrolContentId = entity.getPatrolContentId();
        if (patrolContentId != null) {
            stmt.bindString(10, patrolContentId);
        }
 
        String patrolContentName = entity.getPatrolContentName();
        if (patrolContentName != null) {
            stmt.bindString(11, patrolContentName);
        }
 
        String problem = entity.getProblem();
        if (problem != null) {
            stmt.bindString(12, problem);
        }
 
        String bug = entity.getBug();
        if (bug != null) {
            stmt.bindString(13, bug);
        }
 
        String danger = entity.getDanger();
        if (danger != null) {
            stmt.bindString(14, danger);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subId = entity.getSubId();
        if (subId != null) {
            stmt.bindString(2, subId);
        }
 
        String subName = entity.getSubName();
        if (subName != null) {
            stmt.bindString(3, subName);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        String deviceTypeId = entity.getDeviceTypeId();
        if (deviceTypeId != null) {
            stmt.bindString(6, deviceTypeId);
        }
 
        String getDeviceName = entity.getGetDeviceName();
        if (getDeviceName != null) {
            stmt.bindString(7, getDeviceName);
        }
 
        String intervalUnitId = entity.getIntervalUnitId();
        if (intervalUnitId != null) {
            stmt.bindString(8, intervalUnitId);
        }
 
        String intervalUnitName = entity.getIntervalUnitName();
        if (intervalUnitName != null) {
            stmt.bindString(9, intervalUnitName);
        }
 
        String patrolContentId = entity.getPatrolContentId();
        if (patrolContentId != null) {
            stmt.bindString(10, patrolContentId);
        }
 
        String patrolContentName = entity.getPatrolContentName();
        if (patrolContentName != null) {
            stmt.bindString(11, patrolContentName);
        }
 
        String problem = entity.getProblem();
        if (problem != null) {
            stmt.bindString(12, problem);
        }
 
        String bug = entity.getBug();
        if (bug != null) {
            stmt.bindString(13, bug);
        }
 
        String danger = entity.getDanger();
        if (danger != null) {
            stmt.bindString(14, danger);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceTypeId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // getDeviceName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // intervalUnitId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // intervalUnitName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // patrolContentId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // patrolContentName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // problem
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bug
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // danger
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceTypeId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGetDeviceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntervalUnitId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIntervalUnitName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPatrolContentId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPatrolContentName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProblem(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBug(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDanger(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
